```{r}
?library
treated <- c(rep(1, 400), rep(0, 600))
T <- -3*X2+1
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
treated <- c(rep(1, 400), rep(0, 600))
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
Yc <- 10 + X1
Yt <- 10 + T + X1
set.seed(3132021)
treated <- c(rep(1, 400), rep(0, 600))
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
Yc <- 10 + X1
Yt <- 10 + T + X1
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for patient in length(treated){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for patient in length(treated){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
}
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in length(treated)){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
}
Yobs <- report_observed_data(treated, Yc, Yt)
source('~/.active-rstudio-document')
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in length(treated)){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in length(treated)){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
set.seed(3132021)
treated <- c(rep(1, 400), rep(0, 600))
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
Yc <- 10 + X1
Yt <- 10 + T + X1
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in length(treated)){
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in length(treated)){
print(patient)
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in seq(treated)){
print(patient)
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
set.seed(3132021)
treated <- c(rep(1, 400), rep(0, 600))
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
Yc <- 10 + X1
Yt <- 10 + T + X1
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in seq(treated)){
print(treated[patient])
if (treated[patient] == 1){
append(observed, Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in seq(treated)){
print(treated[patient])
if (treated[patient] == 1){
append(observed, Yt[patient])
print(Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
observed
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- c()
for (patient in seq(treated)){
# print(treated[patient])
if (treated[patient] == 1){
append(observed, Yt[patient])
# print(Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
print(observed)
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
# print(treated[patient])
if (treated[patient] == 1){
append(observed, Yt[patient])
# print(Yt[patient])
}
else {
append(observed, Yc[patient])
}
}
print(observed)
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed <- append(observed, Yt[patient])
}
else {
observed <- append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed <- append(observed, Yt[patient])
}
else {
observed <- append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
rm(list=ls())
set.seed(3132021)
treated <- c(rep(1, 400), rep(0, 600))
X1 <- runif(n=1000, min=0, max=1)
X2 <- runif(n=1000, min=0, max=1)
T <- -3*X2+1
Yc <- 10 + X1
Yt <- 10 + T + X1
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed <- append(observed, Yt[patient])
}
else {
observed <- append(observed, Yc[patient])
}
}
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed <- append(observed, Yt[patient])
}
else {
observed <- append(observed, Yc[patient])
}
}
print(observed)
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed <- append(observed, Yt[patient])
print(observed)
}
else {
observed <- append(observed, Yc[patient])
}
}
print(observed)
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
Yobs <- report_observed_data(treated, Yc, Yt)
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed[patient] <- Yt[patient]
}
else {
observed[patient] <- Yc[patient]
}
}
print(observed)
return(observed)
}
Yobs <- report_observed_data(treated, Yc, Yt)
df <- data.frame(treated, Yc, Yt, Yobs)
summary(df)
Ydiff <- Yt - Yc
df <- data.frame(treated, Yc, Yt, Yobs, Ydiff)
summary(df)
mean(df$Ydiff)
library(tidyverse)
treated_mean <- df %>%
filter(treated = 1) %>%
mean()
treated_mean <- df %>%
filter(treated == 1) %>%
mean()
treated_mean <- df %>%
group_by(treated) %>%
summarise()
View(treated_mean)
treated_mean <- df %>%
group_by(treated) %>%
summarise(mean())
treated_mean <- df %>%
group_by(treated) %>%
summarise(mean(Yobs))
View(treated_mean)
print(treated_mean['mean(Yobs)',0] - treated_mean['mean(Yobs)',1])
print(treated_mean['mean(Yobs)',0])
print(treated_mean['mean(Yobs)',1] - treated_mean['mean(Yobs)',2])
print(treated_mean$`mean(Yobs)`[1] - treated_mean$`mean(Yobs)`[2])
print(treated_mean$mean(Yobs)[1] - treated_mean$mean(Yobs)[2])
print(treated_mean$`mean(Yobs)`[1] - treated_mean$`mean(Yobs)`[2])
sd(Ydiff)
var(Ydiff)
df <- read.csv('data/bti.csv')
df <- read.csv('data/bti.csv')
df <- read.csv('data/bti.csv')
getwd()
df <- read.csv('data/bti.csv')
getwd()
# df <- read.csv('data/bti.csv')
df_path <- file.path('data', 'bti.csv')
df <- read.csv(df_path)
df_path <- file.path('data', 'bti.csv')
df <- read.csv(df_path)
setwd('data')
getwd()
getwd()
df_path <- file.path('data', 'bti.csv')
getwd()
df <- read.csv(df_path)
df_path <- file.path('data', 'bti.csv')
getwd()
# df <- read.csv(df_path)
df_path <- file.path('.data', 'bti.csv')
# getwd()
df <- read.csv(df_path)
df_path <- file.path('/data', 'bti.csv')
# getwd()
df <- read.csv(df_path)
df_path <- file.path('data', 'bti.csv')
# getwd()
df <- read.csv(df_path)
df_path <- file.path('..', 'lab_2', 'data', 'bti.csv')
# getwd()
df <- read.csv(df_path)
data_path <- file.path('data')
# getwd()
df <- read.csv('bti.csv')
library(readxl)
df_path <- file.path('data', 'bti.csv')
df <- read_excel(df_path)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
View(df)
rename_cols <- function(df){
names <- character(length = length(names(df)))
print(names)
}
rename_cols(df)
source('~/UChicago/AdvStats2/hw/hw1/hw1.R')
report_observed_data <- function(treated, Yc, Yt){
observed <- numeric(1000)
for (patient in seq(treated)){
if (treated[patient] == 1){
observed[patient] <- Yt[patient]
}
else {
observed[patient] <- Yc[patient]
}
}
return(observed)
}
source('~/UChicago/AdvStats2/hw/hw1/hw1.R')
treated_mean <- df %>%
group_by(treated) %>%
summarise(sd(Yobs))
treated_mean <- df %>%
group_by(treated) %>%
summarise(sd(Yobs))
sd(Yobs)
library(readxl)
library(tidyverse)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
View(df)
rename_columns <- function(df) {
new_names <- character(length(names(df)))
for (col_index in seq(names(df))){
split_name <- strsplit(names(df)[col_index], '| ', fixed = TRUE)[[1]]
if (length(split_name) == 1){
new_name <- split_name[1]
}
else{
new_name <- split_name[2]
}
new_name <- stringr::str_trim(new_name, side='both')
print(new_name)
new_names[col_index] <- new_name
}
return(new_names)
}
names(df) <- rename_columns(df)
df <- df[,which(unlist(lapply(df, function(x) !all(is.na(x)))))]
library(readxl)
library(tidyverse)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
rename_columns <- function(df) {
new_names <- character(length(names(df)))
for (col_index in seq(names(df))){
split_name <- strsplit(names(df)[col_index], '| ', fixed = TRUE)[[1]]
if (length(split_name) == 1){
new_name <- split_name[1]
}
else{
new_name <- split_name[2]
}
new_name <- stringr::str_trim(new_name, side='both')
print(new_name)
new_names[col_index] <- new_name
}
return(new_names)
}
names(df) <- rename_columns(df)
df <- df[,which(unlist(lapply(df, function(x) !all(is.na(x)))))]
names(df) <- gsub('\\.\\.', '', names(df))
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
df <- df[, !duplicated(colnames(df))]
df <- df %>%
select(-starts_with('..'))
names(df) <- gsub('\\.\\.', '', names(df))
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
View(df)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
?file.path
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
library(readxl)
library(tidyverse)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
library(readxl)
library(tidyverse)
df_path <- file.path('data', 'bti.xlsx')
df <- read_excel(df_path)
View(df)
View(df)
df <- df[, !duplicated(colnames(df))]
df <- df %>%
select(-starts_with('..'))
names(df) <- gsub('\\.\\.', '', names(df))
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
rename_columns <- function(df) {
new_names <- character(length(names(df)))
for (col_index in seq(names(df))){
split_name <- strsplit(names(df)[col_index], '| ', fixed = TRUE)[[1]]
if (length(split_name) == 1){
new_name <- split_name[1]
}
else{
new_name <- split_name[2]
}
new_name <- stringr::str_trim(new_name, side='both')
print(new_name)
new_names[col_index] <- new_name
}
return(new_names)
}
names(df) <- rename_columns(df)
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
df <- df[, which(unlist(lapply(df, function(x) !all(is.na(x)))))]
# df <- df %>%
#   select(-starts_with('..'))
df <- df[, !duplicated(colnames(df))]
df <- df %>%
select(-starts_with('..'))
names(df) <- gsub('\\.\\.', '', names(df))
df <- rename(df, Country = 'East-Central and Southeast Europe\r\n2')
View(df)
shiny::runApp('UChicago/DS2_Winter_2020/Merritt-Notebooks/lab_4')
setwd("~/UChicago/DS2_Winter_2020/Merritt-Notebooks/lab_4")
runApp()
shiny::runApp()
?uiOutput
runApp()
runApp()
?verbatimTextOutput
